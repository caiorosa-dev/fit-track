// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workouts Workout[]

  @@map("users")
}

enum ExecisesType {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  LEGS
  ABS
  CARDIO
  GLUTEOS
}

model Execise {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  description String
  type        ExecisesType

  workout_exercises WorkoutExercise[]
  exercises_logs    ExerciseLog[]

  @@map("exercise")
}

model Workout {
  id      Int    @id @default(autoincrement())
  userId  Int    @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String @db.VarChar(255)
  weekday Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workout_exercises WorkoutExercise[]
  workout_sessions  WorkoutSession[]

  @@map("workout")
}

model WorkoutExercise {
  id    Int @id @default(autoincrement())
  order Int

  workoutId  Int     @map("workout_id")
  workout    Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId Int     @map("exercise_id")
  exercise   Execise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("workout_exercise")
}

model WorkoutSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  workoutId Int     @map("workout_id")
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  exercises_logs ExerciseLog[]

  @@map("workout_session")
}

model ExerciseLog {
  id Int @id @default(autoincrement())

  workoutSessionId Int            @map("workout_session_id")
  workoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  exerciseId       Int            @map("exercise_id")
  exercise         Execise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  sets        Int
  repetitions Int
  weight      Decimal
  createdAt   DateTime @default(now())

  @@map("exercise_log")
}
